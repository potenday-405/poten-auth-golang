name: Build and Push Docker Image and Deploy to k8s

on:
  push:
    branches:
      - master

env:
#  DEPLOYMENT_NAME: coen-chat-deployment # k8s deployment name # k8s 사용하지 않기로 하여 주석처리
  DOCKERHUB_REPOSITORY: parkhyuntae
  IMG_NAME: poten-test # docker image name
  CONTAINER_NAME: poten

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMG_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{sha}},enable=${{ github.ref_type != 'tag' }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPOSITORY }}/${{ env.IMG_NAME }}:latest
            ${{ env.DOCKERHUB_REPOSITORY }}/${{ steps.metadata.outputs.tags }}
#            ${{ github.repository_owner }}/${{ env.IMG_NAME }}:latest
#            ${{ github.repository_owner }}/${{ steps.metadata.outputs.tags }}

      - name: switFailNotify
        if: failure()
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Github action failed\"}" ${{ secrets.SWIT_HOOK_URL }}

      - name: switSuccessNotify
        if: success()
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Github action success\"}" ${{ secrets.SWIT_HOOK_URL }}

  deploy:
    # needs를 통해 build job이 수행 성공시에 작업되도록 설정
    needs: build
    runs-on: ubuntu-latest

    steps:
    # NCP 로그인
      - name: NCP login, stop and remove docker image, and Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_INVITATION_HOST }}
          username: ${{ secrets.NCP_INVITATION_USERNAME }}
          password: ${{ secrets.NCP_INVITATION_PASSWORD }}
          port: ${{ secrets.NCP_INVITATION_PORT }}

          script: |
            sudo docker stop ${{ env.CONTAINER_NAME }}
            sudo docker rm ${{ env.CONTAINER_NAME }}
            sudo docker rmi $(sudo docker images -q ${{ env.DOCKERHUB_REPOSITORY }}/${{ env.IMG_NAME }})
            sudo docker run -d -v /root/env/.env:/app/env/.env --name poten -p 80:8080 ${{ env.DOCKERHUB_REPOSITORY }}/${{ env.IMG_NAME }}
